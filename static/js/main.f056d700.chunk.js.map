{"version":3,"sources":["helper.js","App.js","serviceWorker.js","index.js"],"names":["getIndices","text","userText","right","Math","min","length","wrong","i","charAt","App","props","state","normal","errors","handleUserTextChange","bind","handleBackspace","ref","React","createRef","fetch","then","response","setState","e","target","value","this","newState","slice","console","log","keyCode","preventDefault","className","type","onChange","onKeyDown","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qQAYeA,MAZf,SAAoBC,EAAMC,GAGtB,IAFA,IAAIC,EAAQC,KAAKC,IAAIH,EAASI,OAAQL,EAAKK,QACvCC,EAAQH,KAAKC,IAAIH,EAASI,OAAQL,EAAKK,QAClCE,EAAI,EAAGA,EAAIN,EAASI,OAAQE,IACjC,GAAIP,EAAKQ,OAAOD,KAAON,EAASO,OAAOD,GAAI,CACvCL,EAAQK,EACR,MAGR,MAAO,CAACL,QAAOI,UC6DJG,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXX,KAAM,GACNC,SAAU,GACVC,MAAO,GACPU,OAAQ,GACRN,MAAO,GACPO,OAAQ,GAEV,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,IAAMC,IAAMC,YAZA,E,gEAeE,IAAD,OAClBC,MAAM,YACHC,MAAK,SAAAC,GAAQ,OAAIA,EAAStB,UAC1BqB,MAAK,SAAArB,GAAI,OAAI,EAAKuB,SAAS,CAACvB,OAAMY,OAAQZ,S,2CAG1BwB,GACnB,IAAMvB,EAAWuB,EAAEC,OAAOC,MAC1BC,KAAKJ,UAAS,SAAAZ,GACZ,IAAIiB,EAAW,GACfA,EAAS3B,SAAWA,EAFC,MAGEF,EAAWY,EAAMX,KAAMC,GAAvCC,EAHc,EAGdA,MAAOI,EAHO,EAGPA,MAQd,OAPAsB,EAAS1B,MAAQS,EAAMX,KAAK6B,MAAM,EAAG3B,GACrC0B,EAAStB,MAAQK,EAAMX,KAAK6B,MAAM3B,EAAOI,GACrCsB,EAAStB,MAAMD,OAASM,EAAML,MAAMD,SACtCuB,EAASf,OAASF,EAAME,OAAS,EACjCiB,QAAQC,IAAIH,EAASf,SAEvBe,EAAShB,OAASD,EAAMX,KAAK6B,MAAMvB,GAC5BsB,O,sCAIKJ,GACI,IAAdA,EAAEQ,UACJR,EAAES,iBACFH,QAAQC,IAAI,a,+BAKd,OACE,yBAAKG,UAAU,OACb,uBAAGjB,IAAKU,KAAKV,KACX,0BAAMiB,UAAU,SAASP,KAAKhB,MAAMT,OACpC,0BAAMgC,UAAU,SAASP,KAAKhB,MAAML,OACpC,0BAAM4B,UAAU,UAAUP,KAAKhB,MAAMC,SAEvC,2BACEuB,KAAK,OACLT,MAAOC,KAAKhB,MAAMV,SAClBmC,SAAUT,KAAKb,qBACfuB,UAAWV,KAAKX,uB,GA3DRsB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.f056d700.chunk.js","sourcesContent":["function getIndices(text, userText) {\r\n    let right = Math.min(userText.length, text.length)\r\n    let wrong = Math.min(userText.length, text.length)\r\n    for (let i = 0; i < userText.length; i++) {\r\n        if (text.charAt(i) !== userText.charAt(i)) {\r\n            right = i\r\n            break\r\n        }\r\n    }\r\n    return {right, wrong}\r\n}\r\n\r\nexport default getIndices","import React, {Component} from 'react';\nimport './App.css';\nimport getIndices from './helper';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      userText: '',\n      right: '',\n      normal: '',\n      wrong: '',\n      errors: 0\n    };\n    this.handleUserTextChange = this.handleUserTextChange.bind(this);\n    this.handleBackspace = this.handleBackspace.bind(this);\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    fetch('text.txt')\n      .then(response => response.text())\n      .then(text => this.setState({text, normal: text}));\n  }\n\n  handleUserTextChange(e) {\n    const userText = e.target.value;\n    this.setState(state => {\n      let newState = {}\n      newState.userText = userText\n      const {right, wrong} = getIndices(state.text, userText)\n      newState.right = state.text.slice(0, right)\n      newState.wrong = state.text.slice(right, wrong)\n      if (newState.wrong.length > state.wrong.length) {\n        newState.errors = state.errors + 1\n        console.log(newState.errors)\n      }\n      newState.normal = state.text.slice(wrong)\n      return newState\n    });\n  }\n\n  handleBackspace(e) {\n    if (e.keyCode === 8) {\n      e.preventDefault()\n      console.log('delete')\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <p ref={this.ref}>\n          <span className=\"right\">{this.state.right}</span>\n          <span className=\"wrong\">{this.state.wrong}</span>\n          <span className=\"normal\">{this.state.normal}</span>\n        </p>\n        <input \n          type=\"text\"\n          value={this.state.userText}\n          onChange={this.handleUserTextChange}\n          onKeyDown={this.handleBackspace}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}